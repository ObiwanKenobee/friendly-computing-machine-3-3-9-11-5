AWSTemplateFormatVersion: "2010-09-09"
Description: "QuantumVest Enterprise Production Infrastructure - Complete AWS Stack"

Parameters:
  Environment:
    Type: String
    Default: production
    AllowedValues: [staging, production]
    Description: Environment name

  DomainName:
    Type: String
    Default: quantumvest.app
    Description: Primary domain name

  CertificateArn:
    Type: String
    Description: ACM Certificate ARN for SSL/TLS

  GitHubRepo:
    Type: String
    Default: https://github.com/quantumvest/enterprise-platform
    Description: GitHub repository URL

  OpenAIApiKey:
    Type: String
    NoEcho: true
    Description: OpenAI API Key for AI features

  SupabaseUrl:
    Type: String
    Description: Supabase project URL

  SupabaseAnonKey:
    Type: String
    NoEcho: true
    Description: Supabase anonymous key

Resources:
  # ============================================================================
  # NETWORKING - VPC Configuration
  # ============================================================================

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-quantumvest-vpc
        - Key: Environment
          Value: !Ref Environment

  # Public Subnets for App Runner & Load Balancer
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-public-subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-public-subnet-2

  # Private Subnets for RDS
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: 10.0.3.0/24
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-private-subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: 10.0.4.0/24
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-private-subnet-2

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-quantumvest-igw

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-public-routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  # ============================================================================
  # SECURITY GROUPS
  # ============================================================================

  AppRunnerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for QuantumVest App Runner
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-apprunner-sg

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS PostgreSQL
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref AppRunnerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-database-sg

  RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ElastiCache Redis
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref AppRunnerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-redis-sg

  # ============================================================================
  # DATABASE - RDS PostgreSQL
  # ============================================================================

  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for QuantumVest RDS
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-db-subnet-group

  DatabaseCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora-postgresql
      EngineVersion: "15.4"
      EngineMode: provisioned
      DatabaseName: quantumvest
      MasterUsername: quantumvest_admin
      ManageMasterUserPassword: true
      VpcSecurityGroupIds:
        - !Ref DatabaseSecurityGroup
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      BackupRetentionPeriod: 30
      PreferredBackupWindow: "03:00-04:00"
      PreferredMaintenanceWindow: "sun:04:00-sun:05:00"
      DeletionProtection: true
      StorageEncrypted: true
      EnableCloudwatchLogsExports:
        - postgresql
      ServerlessV2ScalingConfiguration:
        MinCapacity: 0.5
        MaxCapacity: 4
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-quantumvest-cluster
        - Key: Environment
          Value: !Ref Environment

  DatabasePrimaryInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: aurora-postgresql
      DBInstanceClass: db.serverless
      DBClusterIdentifier: !Ref DatabaseCluster
      PubliclyAccessible: false
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-quantumvest-primary

  # ============================================================================
  # CACHE - ElastiCache Redis
  # ============================================================================

  RedisSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Subnet group for QuantumVest Redis
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  RedisCluster:
    Type: AWS::ElastiCache::ReplicationGroup
    Properties:
      ReplicationGroupId: !Sub ${Environment}-quantumvest-redis
      Description: Redis cluster for QuantumVest caching
      NodeType: cache.t4g.micro
      Port: 6379
      NumCacheClusters: 2
      Engine: redis
      EngineVersion: 7.0
      CacheSubnetGroupName: !Ref RedisSubnetGroup
      SecurityGroupIds:
        - !Ref RedisSecurityGroup
      AtRestEncryptionEnabled: true
      TransitEncryptionEnabled: true
      MultiAZEnabled: true
      AutomaticFailoverEnabled: true
      SnapshotRetentionLimit: 7
      SnapshotWindow: "03:00-05:00"
      PreferredMaintenanceWindow: "sun:05:00-sun:07:00"
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-quantumvest-redis
        - Key: Environment
          Value: !Ref Environment

  # ============================================================================
  # STORAGE - S3 Buckets
  # ============================================================================

  AssetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub quantumvest-${Environment}-assets
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-assets-bucket
        - Key: Environment
          Value: !Ref Environment

  BackupsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub quantumvest-${Environment}-backups
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldBackups
            Status: Enabled
            ExpirationInDays: 90
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-backups-bucket
        - Key: Environment
          Value: !Ref Environment

  # ============================================================================
  # CDN - CloudFront Distribution
  # ============================================================================

  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub ${Environment}-quantumvest-oac
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref DomainName
          - !Sub www.${DomainName}
        DefaultCacheBehavior:
          TargetOriginId: AppRunnerOrigin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - POST
            - PATCH
            - DELETE
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingDisabled
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
          ResponseHeadersPolicyId: 5cc3b908-e619-4b99-88e5-2cf7f45965bd # CORS-with-preflight-and-SecurityHeadersPolicy
          Compress: true
        CacheBehaviors:
          - PathPattern: /assets/*
            TargetOriginId: S3AssetsOrigin
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
            AllowedMethods:
              - GET
              - HEAD
            CachedMethods:
              - GET
              - HEAD
            Compress: true
          - PathPattern: /api/*
            TargetOriginId: AppRunnerOrigin
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingDisabled
            OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - POST
              - PATCH
              - DELETE
        Enabled: true
        PriceClass: PriceClass_100
        HttpVersion: http2
        IPV6Enabled: true
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        Origins:
          - Id: AppRunnerOrigin
            DomainName: !GetAtt AppRunnerService.ServiceUrl
            CustomOriginConfig:
              HTTPPort: 443
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1.2
          - Id: S3AssetsOrigin
            DomainName: !GetAtt AssetsBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ""
            OriginAccessControlId: !Ref CloudFrontOriginAccessControl
        DefaultRootObject: index.html
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-quantumvest-cdn
        - Key: Environment
          Value: !Ref Environment

  # ============================================================================
  # APP RUNNER - Main Application
  # ============================================================================

  AppRunnerVPCConnector:
    Type: AWS::AppRunner::VpcConnector
    Properties:
      VpcConnectorName: !Sub ${Environment}-quantumvest-vpc-connector
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroups:
        - !Ref AppRunnerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-vpc-connector
        - Key: Environment
          Value: !Ref Environment

  AppRunnerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Environment}-quantumvest-apprunner-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: build.apprunner.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSAppRunnerServicePolicyForECRAccess
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub ${AssetsBucket}/*
                  - !Sub ${BackupsBucket}/*
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Ref AssetsBucket
                  - !Ref BackupsBucket

  AppRunnerInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Environment}-quantumvest-instance-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: tasks.apprunner.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/apprunner/*
        - PolicyName: XRayTracing
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: "*"

  AppRunnerService:
    Type: AWS::AppRunner::Service
    Properties:
      ServiceName: !Sub ${Environment}-quantumvest-app
      SourceConfiguration:
        AutoDeploymentsEnabled: true
        CodeRepository:
          RepositoryUrl: !Ref GitHubRepo
          SourceCodeVersion:
            Type: BRANCH
            Value: main
          CodeConfiguration:
            ConfigurationSource: REPOSITORY
            CodeConfigurationValues:
              Runtime: NODEJS_18
              BuildCommand: |
                npm ci --include=dev --prefer-offline --no-audit
                npm run typecheck
                NODE_ENV=production GENERATE_SOURCEMAP=false npm run build:production
                npm install -g serve@latest
              StartCommand: serve -s dist -l 8080 --no-clipboard --single
              RuntimeEnvironmentVariables:
                NODE_ENV: production
                PORT: "8080"
                VITE_APP_ENV: production
                VITE_SITE_URL: !Sub https://${DomainName}
                VITE_API_URL: !Sub https://api.${DomainName}
                VITE_OPENAI_API_KEY: !Ref OpenAIApiKey
                VITE_SUPABASE_URL: !Ref SupabaseUrl
                VITE_SUPABASE_ANON_KEY: !Ref SupabaseAnonKey
                VITE_AWS_REGION: !Ref AWS::Region
                VITE_AWS_S3_BUCKET: !Ref AssetsBucket
      InstanceConfiguration:
        Cpu: 0.25 vCPU
        Memory: 0.5 GB
        InstanceRoleArn: !GetAtt AppRunnerInstanceRole.Arn
      AutoScalingConfiguration:
        MinSize: 1
        MaxSize: 10
        MaxConcurrency: 100
      NetworkConfiguration:
        EgressConfiguration:
          EgressType: VPC
          VpcConnectorArn: !GetAtt AppRunnerVPCConnector.VpcConnectorArn
      HealthCheckConfiguration:
        Protocol: HTTP
        Path: /
        Interval: 15
        Timeout: 5
        HealthyThreshold: 2
        UnhealthyThreshold: 5
      ObservabilityConfiguration:
        XrayTracingEnabled: true
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-quantumvest-app
        - Key: Environment
          Value: !Ref Environment

  # ============================================================================
  # MONITORING - CloudWatch Alarms
  # ============================================================================

  HighErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${Environment}-QuantumVest-HighErrorRate
      AlarmDescription: High error rate in App Runner service
      MetricName: 4XXHttpResponseCount
      Namespace: AWS/AppRunner
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 50
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ServiceName
          Value: !Ref AppRunnerService
      AlarmActions:
        - !Ref SNSAlarmTopic

  HighLatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${Environment}-QuantumVest-HighLatency
      AlarmDescription: High latency in App Runner service
      MetricName: RequestLatency
      Namespace: AWS/AppRunner
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 2000
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ServiceName
          Value: !Ref AppRunnerService
      AlarmActions:
        - !Ref SNSAlarmTopic

  DatabaseConnectionsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${Environment}-QuantumVest-DatabaseConnections
      AlarmDescription: High database connections
      MetricName: DatabaseConnections
      Namespace: AWS/RDS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: DBClusterIdentifier
          Value: !Ref DatabaseCluster
      AlarmActions:
        - !Ref SNSAlarmTopic

  # ============================================================================
  # NOTIFICATIONS - SNS Topics
  # ============================================================================

  SNSAlarmTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${Environment}-quantumvest-alarms
      DisplayName: QuantumVest Production Alarms
      KmsMasterKeyId: alias/aws/sns
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-alarm-topic
        - Key: Environment
          Value: !Ref Environment

  # ============================================================================
  # DNS - Route 53 Records
  # ============================================================================

  Route53RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub ${DomainName}.
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2 # CloudFront hosted zone ID
        EvaluateTargetHealth: false

  Route53WWWRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub ${DomainName}.
      Name: !Sub www.${DomainName}
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2 # CloudFront hosted zone ID
        EvaluateTargetHealth: false

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub ${Environment}-VPC-ID

  AppRunnerServiceUrl:
    Description: App Runner Service URL
    Value: !GetAtt AppRunnerService.ServiceUrl
    Export:
      Name: !Sub ${Environment}-AppRunner-URL

  CloudFrontDistributionId:
    Description: CloudFront Distribution ID
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub ${Environment}-CloudFront-ID

  CloudFrontDomainName:
    Description: CloudFront Domain Name
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub ${Environment}-CloudFront-Domain

  DatabaseClusterEndpoint:
    Description: RDS Cluster Endpoint
    Value: !GetAtt DatabaseCluster.Endpoint.Address
    Export:
      Name: !Sub ${Environment}-Database-Endpoint

  RedisClusterEndpoint:
    Description: Redis Cluster Endpoint
    Value: !GetAtt RedisCluster.PrimaryEndPoint.Address
    Export:
      Name: !Sub ${Environment}-Redis-Endpoint

  AssetsBucketName:
    Description: S3 Assets Bucket Name
    Value: !Ref AssetsBucket
    Export:
      Name: !Sub ${Environment}-Assets-Bucket

  BackupsBucketName:
    Description: S3 Backups Bucket Name
    Value: !Ref BackupsBucket
    Export:
      Name: !Sub ${Environment}-Backups-Bucket
